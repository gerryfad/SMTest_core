// swiftlint:disable all
// Generated using SwiftGen â€” https://github.com/SwiftGen/SwiftGen

{% if tables.count > 0 %}
{% set accessModifier %}{% if param.publicAccess %}public{% else %}internal{% endif %}{% endset %}
import Foundation

// MARK: - Strings

{% macro parametersBlock types %}{% filter removeNewlines:"leading" %}
  {% for type in types %}
    _ p{{forloop.counter}}: {{type}}{{ ", " if not forloop.last }}
  {% endfor %}
{% endfilter %}{% endmacro %}
{% macro argumentsBlock types %}{% filter removeNewlines:"leading" %}
  {% for type in types %}
    {% if type == "UnsafeRawPointer" %}
    Int(bitPattern: p{{forloop.counter}})
    {% else %}
    p{{forloop.counter}}
    {% endif %}
    {{ ", " if not forloop.last }}
  {% endfor %}
{% endfilter %}{% endmacro %}
{% macro recursiveBlock table item %}
  {% for string in item.strings %}
  {% if not param.noComments %}
  
  {% endif %}
  {% if string.types %}
  {{accessModifier}} static func {{string.name|swiftIdentifier:"pretty"|lowerFirstWord|escapeReservedKeywords}}({% call parametersBlock string.types %}) -> String {
    return {{enumName}}.tr("{{string.key}}", {% call argumentsBlock string.types %})
  }
  {% else %}
  case {{string.name|swiftIdentifier:"pretty"|lowerFirstWord|escapeReservedKeywords}}
  {% endif %}
  {% endfor %}

  /// translate by device language
  func trd() -> String {
    return {{enumName}}.trd("{{table}}", self.rawValue)
  }

  /// translate by preference language
  func tr() -> String {
    return {{enumName}}.tr(self.rawValue)
  }

  /// manually translate by language
  func tr(_ language: ProjLanguage) -> String {
    return {{enumName}}.tr(language, self.rawValue)
  }
  {% for child in item.children %}

  {{accessModifier}} enum {{child.name|swiftIdentifier:"pretty"|escapeReservedKeywords}} {
    {% filter indent:2 %}{% call recursiveBlock table child %}{% endfilter %}
  }
  {% endfor %}
{% endmacro %}
{% set enumName %}{{param.enumName|default:"L10n"}}{% endset %}
/// Localizable strings (Suitmedia)
{{accessModifier}} enum {{enumName}}: String {
  {% if tables.count > 1 %}
  {% for table in tables %}
  {{accessModifier}} enum {{table.name|swiftIdentifier:"pretty"|escapeReservedKeywords}} {
    {% filter indent:2 %}{% call recursiveBlock table.name table.levels %}{% endfilter %}
  }
  {% endfor %}
  {% else %}
  {% call recursiveBlock tables.first.name tables.first.levels %}
  {% endif %}
}

// MARK: - Implementation Details

extension {{enumName}} {
  private static func trd(_ table: String, _ key: String, _ args: CVarArg...) -> String {
    let format = NSLocalizedString(key, tableName: table, bundle: Bundle(for: BundleToken.self), comment: "")
    return String(format: format, locale: Locale.current, arguments: args)
  }

  private static func tr(_ key: String, _ args: CVarArg...) -> String {
    let format = LocaleManager.instance.localizedStringForKey(key: key)
    return String(format: format, arguments: args)
  }

  private static func tr(_ language: ProjLanguage, _ key: String, _ args: CVarArg...) -> String {
    let format = LocaleManager.instance.localizedStringForKey(key: key, language: language)
    return String(format: format, arguments: args)
  }
}

private final class BundleToken {}
{% else %}
// No string found
{% endif %}
